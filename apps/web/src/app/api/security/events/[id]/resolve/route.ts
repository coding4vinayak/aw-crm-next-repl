import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\nimport { AuditLogger } from '@/lib/audit';\n\nexport async function POST(\n  req: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's organization and check if they have admin access\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n      select: { organizationId: true, role: true },\n    });\n\n    if (!user || (user.role !== 'ADMIN' && user.role !== 'MANAGER')) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions' },\n        { status: 403 }\n      );\n    }\n\n    const eventId = params.id;\n\n    // Find the security event\n    const securityEvent = await prisma.securityEvent.findUnique({\n      where: {\n        id: eventId,\n        organizationId: user.organizationId,\n      },\n    });\n\n    if (!securityEvent) {\n      return NextResponse.json(\n        { error: 'Security event not found' },\n        { status: 404 }\n      );\n    }\n\n    if (securityEvent.resolved) {\n      return NextResponse.json(\n        { error: 'Security event already resolved' },\n        { status: 400 }\n      );\n    }\n\n    // Resolve the security event\n    const updatedEvent = await prisma.securityEvent.update({\n      where: { id: eventId },\n      data: {\n        resolved: true,\n        resolvedAt: new Date(),\n      },\n    });\n\n    // Log the resolution\n    await AuditLogger.log(\n      'SECURITY_EVENT_RESOLVED',\n      'SECURITY_EVENT',\n      eventId,\n      { resolved: false },\n      { resolved: true, resolvedBy: session.user.id },\n      req\n    );\n\n    return NextResponse.json({\n      success: true,\n      event: updatedEvent,\n    });\n  } catch (error) {\n    console.error('Security event resolution error:', error);\n    return NextResponse.json(\n      { error: 'Failed to resolve security event' },\n      { status: 500 }\n    );\n  }\n}\n"