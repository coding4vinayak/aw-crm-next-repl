import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's organization and check if they have admin access\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n      select: { organizationId: true, role: true },\n    });\n\n    if (!user || (user.role !== 'ADMIN' && user.role !== 'MANAGER')) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(req.url);\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const severity = searchParams.get('severity');\n    const resolved = searchParams.get('resolved');\n\n    const where: any = {\n      organizationId: user.organizationId,\n    };\n\n    if (severity) {\n      where.severity = severity;\n    }\n\n    if (resolved !== null) {\n      where.resolved = resolved === 'true';\n    }\n\n    const events = await prisma.securityEvent.findMany({\n      where,\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n      skip: offset,\n    });\n\n    return NextResponse.json({\n      success: true,\n      events,\n    });\n  } catch (error) {\n    console.error('Security events fetch error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch security events' },\n      { status: 500 }\n    );\n  }\n}\n"