import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\nimport { SecurityService } from '@/lib/security';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { message: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const { password, token } = await req.json();\n\n    if (!password || !token) {\n      return NextResponse.json(\n        { message: 'Password and token are required' },\n        { status: 400 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email: session.user.email },\n      select: { id: true, mfaEnabled: true, mfaSecret: true, passwordHash: true },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    if (!user.mfaEnabled) {\n      return NextResponse.json(\n        { message: 'MFA is not enabled' },\n        { status: 400 }\n      );\n    }\n\n    // Verify password\n    const isPasswordValid = await SecurityService.comparePassword(password, user.passwordHash);\n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { message: 'Invalid password' },\n        { status: 400 }\n      );\n    }\n\n    // Verify MFA token\n    if (user.mfaSecret) {\n      const isTokenValid = SecurityService.verifyMfaToken(user.mfaSecret, token);\n      if (!isTokenValid) {\n        return NextResponse.json(\n          { message: 'Invalid MFA token' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Disable MFA\n    await prisma.user.update({\n      where: { id: user.id },\n      data: {\n        mfaEnabled: false,\n        mfaSecret: null,\n        backupCodes: [],\n      },\n    });\n\n    // Log security event\n    await SecurityService.logSecurityEvent(\n      user.id,\n      'MFA_DISABLED',\n      'HIGH',\n      { method: 'manual' }\n    );\n\n    return NextResponse.json({\n      message: 'MFA disabled successfully',\n    });\n  } catch (error) {\n    console.error('MFA disable error:', error);\n    return NextResponse.json(\n      { message: 'An error occurred while disabling MFA' },\n      { status: 500 }\n    );\n  }\n}\n"