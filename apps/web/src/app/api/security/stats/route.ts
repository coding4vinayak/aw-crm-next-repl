import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's organization and check if they have admin access\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n      select: { organizationId: true, role: true },\n    });\n\n    if (!user || (user.role !== 'ADMIN' && user.role !== 'MANAGER')) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions' },\n        { status: 403 }\n      );\n    }\n\n    // Get security statistics\n    const [totalEvents, criticalEvents, resolvedEvents, activeThreats, mfaEnabledUsers, totalUsers] = await Promise.all([\n      prisma.securityEvent.count({\n        where: { organizationId: user.organizationId },\n      }),\n      prisma.securityEvent.count({\n        where: {\n          organizationId: user.organizationId,\n          severity: 'CRITICAL',\n        },\n      }),\n      prisma.securityEvent.count({\n        where: {\n          organizationId: user.organizationId,\n          resolved: true,\n        },\n      }),\n      prisma.securityEvent.count({\n        where: {\n          organizationId: user.organizationId,\n          resolved: false,\n          severity: {\n            in: ['HIGH', 'CRITICAL'],\n          },\n        },\n      }),\n      prisma.user.count({\n        where: {\n          organizationId: user.organizationId,\n          mfaEnabled: true,\n        },\n      }),\n      prisma.user.count({\n        where: { organizationId: user.organizationId },\n      }),\n    ]);\n\n    const stats = {\n      totalEvents,\n      criticalEvents,\n      resolvedEvents,\n      activeThreats,\n      mfaEnabledUsers,\n      totalUsers,\n    };\n\n    return NextResponse.json({\n      success: true,\n      stats,\n    });\n  } catch (error) {\n    console.error('Security stats fetch error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch security statistics' },\n      { status: 500 }\n    );\n  }\n}\n"