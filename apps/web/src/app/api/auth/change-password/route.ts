import { NextRequest, NextResponse } from 'next/server'; \nimport { getServerSession } from 'next-auth'; \nimport { authOptions } from '@/lib/auth'; \nimport { prisma } from '@awcrm/database'; \nimport { SecurityService } from '@/lib/security'; \n\nexport async function PUT(req: NextRequest) { \n  try { \n    const session = await getServerSession(authOptions); \n\n    if (!session?.user?.email) { \n      return NextResponse.json(\n        { message: 'Unauthorized' }, \n        { status: 401 }\n); \n } \n\n    const { currentPassword, newPassword } = await req.json(); \n\n    // Validate input\n    if (!currentPassword || !newPassword) {\n      return NextResponse.json(\n        { message: 'Current password and new password are required' },\n        { status: 400 }\n      );\n    }\n\n    // Get user with password\n    const user = await prisma.user.findUnique({\n      where: {\n        email: session.user.email,\n      },\n      select: {\n        id: true,\n        passwordHash: true,\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    // Verify current password\n    const isPasswordValid = await SecurityService.comparePassword(currentPassword, user.passwordHash);\n\n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { message: 'Current password is incorrect' },\n        { status: 400 }\n      );\n    }\n\n    // Validate new password\n    const passwordValidation = SecurityService.validatePassword(newPassword);\n    if (!passwordValidation.valid) {\n      return NextResponse.json(\n        { message: passwordValidation.errors.join(', ') },\n        { status: 400 }\n      );\n    }\n\n    // Hash new password\n    const hashedPassword = await SecurityService.hashPassword(newPassword);\n\n    // Update password\n    await prisma.user.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        passwordHash: hashedPassword,\n      },\n    });\n\n    // Log security event\n    await SecurityService.logSecurityEvent(\n      user.id,\n      'PASSWORD_CHANGED',\n      'MEDIUM',\n      { method: 'manual' }\n    );\n\n    return NextResponse.json(\n      { message: 'Password updated successfully' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Change password error:', error);\n    return NextResponse.json(\n      { message: 'An error occurred while changing your password' },\n      { status: 500 }\n    );\n  }\n}\n"