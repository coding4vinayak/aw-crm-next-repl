import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\nimport { SecurityService } from '@/lib/security';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { message: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const { token } = await req.json();\n\n    if (!token) {\n      return NextResponse.json(\n        { message: 'Token is required' },\n        { status: 400 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email: session.user.email },\n      select: { id: true, mfaEnabled: true, mfaSecret: true },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    if (user.mfaEnabled) {\n      return NextResponse.json(\n        { message: 'MFA is already enabled' },\n        { status: 400 }\n      );\n    }\n\n    if (!user.mfaSecret) {\n      return NextResponse.json(\n        { message: 'MFA setup not initiated' },\n        { status: 400 }\n      );\n    }\n\n    // Verify the token\n    const isValid = SecurityService.verifyMfaToken(user.mfaSecret, token);\n\n    if (!isValid) {\n      return NextResponse.json(\n        { message: 'Invalid token' },\n        { status: 400 }\n      );\n    }\n\n    // Generate backup codes\n    const backupCodes = SecurityService.generateBackupCodes(8);\n    const hashedBackupCodes = await Promise.all(\n      backupCodes.map(code => SecurityService.hashPassword(code))\n    );\n\n    // Enable MFA\n    await prisma.user.update({\n      where: { id: user.id },\n      data: {\n        mfaEnabled: true,\n        backupCodes: hashedBackupCodes,\n      },\n    });\n\n    // Log security event\n    await SecurityService.logSecurityEvent(\n      user.id,\n      'MFA_ENABLED',\n      'MEDIUM',\n      { method: 'TOTP' }\n    );\n\n    return NextResponse.json({\n      message: 'MFA enabled successfully',\n      backupCodes,\n    });\n  } catch (error) {\n    console.error('MFA enable error:', error);\n    return NextResponse.json(\n      { message: 'An error occurred while enabling MFA' },\n      { status: 500 }\n    );\n  }\n}\n"