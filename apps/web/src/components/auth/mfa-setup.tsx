'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Shield, Copy, Check } from 'lucide-react';\nimport Image from 'next/image';\n\ninterface MFASetupProps {\n  isEnabled: boolean;\n  onStatusChange: (enabled: boolean) => void;\n}\n\nexport function MFASetup({ isEnabled, onStatusChange }: MFASetupProps) {\n  const [step, setStep] = useState<'setup' | 'verify' | 'backup-codes'>('setup');\n  const [qrCode, setQrCode] = useState<string>('');\n  const [secret, setSecret] = useState<string>('');\n  const [token, setToken] = useState('');\n  const [backupCodes, setBackupCodes] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [copiedCodes, setCopiedCodes] = useState(false);\n\n  const startMFASetup = async () => {\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/mfa/setup', {\n        method: 'POST',\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to setup MFA');\n      }\n\n      setQrCode(data.qrCode);\n      setSecret(data.secret);\n      setStep('verify');\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('An error occurred. Please try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const verifyAndEnable = async () => {\n    if (!token || token.length !== 6) {\n      setError('Please enter a valid 6-digit code');\n      return;\n    }\n\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/mfa/enable', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to enable MFA');\n      }\n\n      setBackupCodes(data.backupCodes);\n      setStep('backup-codes');\n      setSuccess('MFA enabled successfully!');\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('An error occurred. Please try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const disableMFA = async () => {\n    const password = prompt('Please enter your password to disable MFA:');\n    const mfaToken = prompt('Please enter your current MFA code:');\n\n    if (!password || !mfaToken) {\n      return;\n    }\n\n    setError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/mfa/disable', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ password, token: mfaToken }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to disable MFA');\n      }\n\n      setSuccess('MFA disabled successfully');\n      onStatusChange(false);\n    } catch (error) {\n      if (error instanceof Error) {\n        setError(error.message);\n      } else {\n        setError('An error occurred. Please try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const copyBackupCodes = () => {\n    const codesText = backupCodes.join('\\n');\n    navigator.clipboard.writeText(codesText);\n    setCopiedCodes(true);\n    setTimeout(() => setCopiedCodes(false), 2000);\n  };\n\n  const finishSetup = () => {\n    setStep('setup');\n    setToken('');\n    setQrCode('');\n    setSecret('');\n    setBackupCodes([]);\n    onStatusChange(true);\n  };\n\n  if (isEnabled && step === 'setup') {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5 text-green-600\" />\n            Multi-Factor Authentication\n          </CardTitle>\n          <CardDescription>\n            MFA is currently enabled for your account.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                Enabled\n              </Badge>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Your account is protected with two-factor authentication.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button variant=\"destructive\" onClick={disableMFA} disabled={isLoading}>\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Disabling...\n              </>\n            ) : (\n              'Disable MFA'\n            )}\n          </Button>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      {success && (\n        <Alert>\n          <AlertDescription>{success}</AlertDescription>\n        </Alert>\n      )}\n\n      {step === 'setup' && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Enable Multi-Factor Authentication\n            </CardTitle>\n            <CardDescription>\n              Add an extra layer of security to your account with MFA.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div>\n                  <h4 className=\"font-medium\">Authenticator App</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use an app like Google Authenticator or Authy\n                  </p>\n                </div>\n                <Badge variant=\"outline\">Recommended</Badge>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <Button onClick={startMFASetup} disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Setting up...\n                </>\n              ) : (\n                'Set Up MFA'\n              )}\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n\n      {step === 'verify' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Scan QR Code</CardTitle>\n            <CardDescription>\n              Scan this QR code with your authenticator app, then enter the 6-digit code.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex justify-center\">\n              {qrCode && (\n                <Image\n                  src={qrCode}\n                  alt=\"MFA QR Code\"\n                  width={200}\n                  height={200}\n                  className=\"border rounded-lg\"\n                />\n              )}\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Can't scan? Enter this code manually:\n              </p>\n              <code className=\"bg-muted px-2 py-1 rounded text-sm\">{secret}</code>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"token\">Verification Code</Label>\n              <Input\n                id=\"token\"\n                type=\"text\"\n                placeholder=\"000000\"\n                value={token}\n                onChange={(e) => setToken(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                maxLength={6}\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => setStep('setup')}>\n              Back\n            </Button>\n            <Button onClick={verifyAndEnable} disabled={isLoading || token.length !== 6}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                'Verify & Enable'\n              )}\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n\n      {step === 'backup-codes' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Backup Codes</CardTitle>\n            <CardDescription>\n              Save these backup codes in a safe place. You can use them to access your account if you lose your authenticator device.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert>\n              <AlertDescription>\n                Each backup code can only be used once. Store them securely!\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"bg-muted p-4 rounded-lg\">\n              <div className=\"grid grid-cols-2 gap-2 font-mono text-sm\">\n                {backupCodes.map((code, index) => (\n                  <div key={index} className=\"p-2 bg-background rounded border\">\n                    {code}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              onClick={copyBackupCodes}\n              className=\"w-full\"\n            >\n              {copiedCodes ? (\n                <>\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Copied!\n                </>\n              ) : (\n                <>\n                  <Copy className=\"mr-2 h-4 w-4\" />\n                  Copy Backup Codes\n                </>\n              )}\n            </Button>\n          </CardContent>\n          <CardFooter>\n            <Button onClick={finishSetup} className=\"w-full\">\n              I've Saved My Backup Codes\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n    </div>\n  );\n}\n"