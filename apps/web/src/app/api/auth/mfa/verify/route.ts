import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\nimport { SecurityService } from '@/lib/security';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, token, isBackupCode = false } = await req.json();\n\n    if (!email || !token) {\n      return NextResponse.json(\n        { message: 'Email and token are required' },\n        { status: 400 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n      select: { id: true, mfaEnabled: true, mfaSecret: true, backupCodes: true },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    if (!user.mfaEnabled) {\n      return NextResponse.json(\n        { message: 'MFA is not enabled for this user' },\n        { status: 400 }\n      );\n    }\n\n    let isValid = false;\n\n    if (isBackupCode) {\n      // Verify backup code\n      for (const hashedCode of user.backupCodes) {\n        if (await SecurityService.comparePassword(token, hashedCode)) {\n          isValid = true;\n          \n          // Remove used backup code\n          const updatedCodes = user.backupCodes.filter(code => code !== hashedCode);\n          await prisma.user.update({\n            where: { id: user.id },\n            data: { backupCodes: updatedCodes },\n          });\n          \n          break;\n        }\n      }\n    } else {\n      // Verify TOTP token\n      if (user.mfaSecret) {\n        isValid = SecurityService.verifyMfaToken(user.mfaSecret, token);\n      }\n    }\n\n    if (!isValid) {\n      // Log failed MFA attempt\n      await SecurityService.logSecurityEvent(\n        user.id,\n        'LOGIN_FAILED',\n        'MEDIUM',\n        { reason: 'Invalid MFA token', method: isBackupCode ? 'backup_code' : 'totp' }\n      );\n      \n      return NextResponse.json(\n        { message: 'Invalid token' },\n        { status: 400 }\n      );\n    }\n\n    // Log successful MFA verification\n    await SecurityService.logSecurityEvent(\n      user.id,\n      'LOGIN_SUCCESS',\n      'LOW',\n      { method: isBackupCode ? 'backup_code' : 'totp' }\n    );\n\n    return NextResponse.json({\n      message: 'Token verified successfully',\n      valid: true,\n    });\n  } catch (error) {\n    console.error('MFA verify error:', error);\n    return NextResponse.json(\n      { message: 'An error occurred during token verification' },\n      { status: 500 }\n    );\n  }\n}\n"