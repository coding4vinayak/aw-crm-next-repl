import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { AuditLogger } from '@/lib/audit';\nimport { prisma } from '@awcrm/database';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    // Get user's organization and check if they have admin access\n    const user = await prisma.user.findUnique({\n      where: { id: session.user.id },\n      select: { organizationId: true, role: true },\n    });\n\n    if (!user || (user.role !== 'ADMIN' && user.role !== 'MANAGER')) {\n      return NextResponse.json(\n        { error: 'Insufficient permissions' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(req.url);\n    const limit = parseInt(searchParams.get('limit') || '50');\n    const offset = parseInt(searchParams.get('offset') || '0');\n    const action = searchParams.get('action');\n    const entityType = searchParams.get('entityType');\n    const userId = searchParams.get('userId');\n    const startDate = searchParams.get('startDate');\n    const endDate = searchParams.get('endDate');\n\n    const filters: any = {\n      limit,\n      offset,\n    };\n\n    if (action) filters.action = action;\n    if (entityType) filters.entityType = entityType;\n    if (userId) filters.userId = userId;\n    if (startDate) filters.startDate = new Date(startDate);\n    if (endDate) filters.endDate = new Date(endDate);\n\n    const result = await AuditLogger.getAuditLogs(user.organizationId, filters);\n\n    return NextResponse.json({\n      success: true,\n      logs: result.logs,\n      total: result.total,\n      hasMore: result.hasMore,\n    });\n  } catch (error) {\n    console.error('Audit logs fetch error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch audit logs' },\n      { status: 500 }\n    );\n  }\n}\n"