import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@awcrm/database';\nimport { SecurityService } from '@/lib/security';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { message: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email: session.user.email },\n      select: { id: true, mfaEnabled: true },\n    });\n\n    if (!user) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    if (user.mfaEnabled) {\n      return NextResponse.json(\n        { message: 'MFA is already enabled' },\n        { status: 400 }\n      );\n    }\n\n    // Generate MFA secret\n    const { secret, qrCodeUrl } = SecurityService.generateMfaSecret(session.user.email);\n    const qrCodeDataUrl = await SecurityService.generateQRCode(qrCodeUrl);\n\n    // Store the secret temporarily (not enabled yet)\n    await prisma.user.update({\n      where: { id: user.id },\n      data: { mfaSecret: secret },\n    });\n\n    return NextResponse.json({\n      secret,\n      qrCode: qrCodeDataUrl,\n    });\n  } catch (error) {\n    console.error('MFA setup error:', error);\n    return NextResponse.json(\n      { message: 'An error occurred during MFA setup' },\n      { status: 500 }\n    );\n  }\n}\n"